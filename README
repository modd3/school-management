 -----

# School Management System

A full-stack web application designed to streamline administrative tasks, manage student records, facilitate communication, and track academic progress within educational institutions.

## ✨ Features

This system aims to provide a comprehensive platform for various stakeholders:

  * **User Authentication & Authorization:** Secure login system with distinct roles.
      * **Admin:**
          * Full control over user management (registering new users and assigning roles).
          * Overall system configuration and data management.
      * **Teacher:**
          * View assigned classes and subjects.
          * Enter and update marks for students in their subjects (Cat 1, Cat 2, Endterm).
          * Add comments on student results.
          * View student profiles and academic progress.
      * **Student:**
          * View their profile.
          * Access their academic results (marks, grades, comments) per term and academic year.
      * **Parent:**
          * View profiles and academic results for their linked children.
          * Access communication features (future).
  * **Student Management:**
      * Enrollment, tracking, and management of student profiles.
      * Assignment of students to classes.
  * **Class & Subject Management:**
      * Creation and management of classes and subjects.
      * Assignment of teachers to subjects.
  * **Term Management:** Define and manage academic terms (e.g., Term 1, Term 2, Term 3).
  * **Result Entry & Management:**
      * Record and update marks for `Cat 1`, `Cat 2`, and `Endterm` exams.
      * Automated calculation of total marks, grades, and points.
  * **Result Analytics:** Backend provides endpoints for aggregated result data (e.g., average scores by subject, student performance over terms) to be visualized on the frontend.
  * **Profile Management:** Users can view and update their personal details (password, profile picture - *if implemented*).

## 🚀 Technology Stack

This project is built with the MERN stack and additional modern web technologies:

  * **Frontend:**
      * **React.js:** A JavaScript library for building user interfaces.
      * **Vite:** A fast build tool for modern web projects.
      * **React Router DOM:** For declarative routing in the React application.
      * **Tailwind CSS:** A utility-first CSS framework for rapidly building custom designs.
      * **React Icons:** Popular icon libraries as React components.
      * `axios` (for HTTP requests)
  * **Backend:**
      * **Node.js:** JavaScript runtime.
      * **Express.js:** Fast, unopinionated, minimalist web framework for Node.js.
      * **MongoDB:** NoSQL database for flexible data storage.
      * **Mongoose:** ODM (Object Data Modeling) library for MongoDB and Node.js.
      * **JSON Web Tokens (JWT):** For secure user authentication.
      * **bcryptjs:** For password hashing.
      * **cookie-parser:** Middleware for parsing cookies.
      * **cors:** Node.js middleware for enabling Cross-Origin Resource Sharing.
      * `express-async-handler`: Simple middleware for handling exceptions inside of async express routes.
      * `nodemailer`: For sending emails (e.g., forgot password functionality).
      * `dotenv`: For managing environment variables.

## 📦 Setup & Installation

Follow these steps to get the project up and running on your local machine.

### Prerequisites

  * Node.js (LTS version recommended)
  * npm (comes with Node.js) or Yarn
  * MongoDB installed locally or access to a MongoDB Atlas cluster.
  * Git

### 1\. Clone the Repository

```bash
git clone <your-repository-url>
cd school-management-system # Or whatever your root folder is named
```

### 2\. Backend Setup

Navigate to the `server` (or `backend`) directory:

```bash
cd server # Or cd backend
```

Install backend dependencies:

```bash
npm install # or yarn install
```

Create a `.env` file in the `server` directory and add your environment variables:

```dotenv
# .env (in the server directory)
NODE_ENV=development
PORT=5000
MONGO_URI=mongodb://localhost:27017/school_db # Or your MongoDB Atlas URI
JWT_SECRET=YOUR_VERY_STRONG_RANDOM_SECRET_KEY_HERE
JWT_COOKIE_EXPIRE=30d # e.g., 30 days
EMAIL_USERNAME=your_email@example.com
EMAIL_PASSWORD=your_email_password # Use an app password for Gmail
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
```

**Important:** Replace placeholder values with your actual secret keys and MongoDB URI. For `JWT_SECRET`, generate a long, random string. For email credentials, use an app-specific password if you're using services like Gmail with 2FA enabled.

### 3\. Frontend Setup

Navigate to the `frontend` directory:

```bash
cd ../frontend # Go back to root, then into frontend OR cd frontend directly from root
```

Install frontend dependencies:

```bash
npm install # or yarn install
```

Create a `.env` file in the `frontend` directory:

```dotenv
# .env (in the frontend directory)
VITE_API_BASE_URL=http://localhost:5000/api # Ensure this matches your backend API URL
```

### 4\. Running the Application

**Start the Backend Server:**

Navigate back to the `server` directory and run:

```bash
cd ../server # If you are in frontend directory, otherwise skip
npm start # or npm run dev
```

The backend server should start on `http://localhost:5000` (or your specified `PORT`).

**Start the Frontend Development Server:**

Open a **new terminal window**, navigate to the `frontend` directory, and run:

```bash
cd frontend
npm run dev # or yarn dev
```

The frontend application should open in your browser at `http://localhost:5173` (or whatever port Vite assigns).

-----

## 🚦 Key Endpoints (Examples)

Here are some key API endpoints you might interact with:

**Authentication:**

  * `POST /api/auth/register` (Admin Only)
  * `POST /api/auth/login`
  * `GET /api/auth/logout`
  * `GET /api/auth/me` (Protected)
  * `POST /api/auth/forgotpassword`
  * `PATCH /api/auth/resetpassword/:resettoken`

**Teacher Specific:**

  * `POST /api/teacher/results/enter` (Protected - Teacher/Class Teacher/Subject Teacher)
  * `GET /api/teacher/results/for-entry/:classId/:subjectId/:termId/:academicYear` (Protected)
  * `PUT /api/teacher/results/comment/:resultId` (Protected)

**Student/Parent Specific:**

  * `GET /api/results/student/:studentId/term/:termId/academicYear/:academicYear` (Protected - Student/Parent/Teacher/Admin)

*(Note: Actual endpoints may vary based on your `routes` setup.)*

-----

## 📂 Project Structure (High-Level)

```
school-management-system/
├── server/
│   ├── config/              # Database connection, environment config
│   ├── controllers/         # Business logic for routes
│   ├── middleware/          # Authentication (protect, authorize), error handling
│   ├── models/              # Mongoose schemas for MongoDB
│   ├── routes/              # API endpoints
│   ├── utils/               # Utility functions (grading, email, token generation)
│   ├── .env                 # Environment variables for backend
│   ├── package.json
│   └── server.js            # Main backend application file
├── frontend/
│   ├── public/              # Static assets
│   ├── src/
│   │   ├── api/             # Functions for API calls
│   │   ├── assets/          # Images, fonts
│   │   ├── components/      # Reusable UI components
│   │   ├── context/         # React Context for global state (e.g., AuthContext)
│   │   ├── hooks/           # Custom React hooks
│   │   ├── pages/           # Individual pages/views
│   │   ├── App.jsx          # Main React component, routes
│   │   ├── index.css        # Tailwind CSS directives
│   │   └── main.jsx         # React entry point
│   ├── .env                 # Environment variables for frontend
│   ├── package.json
│   └── vite.config.js
└── README.md
```

-----

## 🤝 Contributing

We welcome contributions from anyone interested in helping us build a robust school management system\!

1.  **Fork the repository.**
2.  **Clone your forked repository** to your local machine.
3.  **Create a new branch** for your feature or bug fix: `git checkout -b feature/your-feature-name` or `fix/issue-description`.
4.  **Make your changes**, ensuring they adhere to the project's coding style (if any).
5.  **Test your changes** thoroughly.
6.  **Commit your changes** with a clear and concise message: `git commit -m "feat: Add new feature"`.
7.  **Push your branch** to your forked repository: `git push origin feature/your-feature-name`.
8.  **Open a Pull Request** (PR) to the `main` branch of the original repository.
      * Provide a clear description of your changes.
      * Reference any relevant issues.

Please ensure your pull requests are focused on a single feature or bug fix.

-----

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](https://www.google.com/search?q=LICENSE) file for details.

-----

## ✉️ Contact

For questions or further collaboration, please contact:

  * email: mohamj876@gmail.com
  * github: http://github.com/modd3

-----